{"version":3,"sources":["axios.js","components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","post","props","className","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","delete","id","then","reponse","console","log","this","get","response","setState","data","style","textAlign","body","Component","NewPost","content","postDataHandler","type","value","onChange","event","target","rows","Blog","posts","selectedPostId","error","updatePosts","slice","map","catch","errr","key","postSelectedHandler","App","Boolean","window","location","hostname","match","defaults","interceptors","request","use","Promise","reject","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.191d92dd.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com'\r\n}\r\n);\r\n\r\nexport default instance","import React from 'react';\n\nimport './Post.css';\n\nconst post = (props) => (\n    <article className=\"Post\" onClick={props.clicked}>\n        <h1>{props.title}</h1>\n        <div className=\"Info\">\n            <div className=\"Author\">{props.author}</div>\n        </div>\n    </article>\n);\n\nexport default post;","import React, { Component } from 'react';\nimport axios from 'axios'\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n    state={\n        loadedPost: null\n    }\ncomponentDidUpdate() {\n    if (this.props.id) {\n        if(!this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id !== this.props.id)){\n            axios.get('/posts/'+this.props.id)\n            .then(response=> {\n                this.setState({loadedPost: response.data})\n                console.log(response)\n            })\n\n        }\n    }\n\n}\n\ndeletePostHandler = () => {\n    axios.delete('/posts/'+this.props.id)\n    .then(reponse => {\n        console.log(reponse)\n    })\n}\n\n    render () {\n        let post = <p style={{textAlign: 'center'}}>Please select a Post!</p>;\n        if (this.props.id) {\n         post = <p style={{textAlign: 'center'}}>Loading!</p>;\n        }\n        if (this.state.loadedPost) {\n         post = (\n            <div className=\"FullPost\">\n                <h1>{this.state.loadedPost.title}</h1>\n                <p>{this.state.loadedPost.body}</p>\n                <div className=\"Edit\">\n                    <button className=\"Delete\" onClick={this.deletePostHandler}>Delete</button>\n                </div>\n            </div>\n\n        );\n        }\n    \n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\nimport axios from 'axios'\n\nimport './NewPost.css';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        content: '',\n        author: 'Max'\n    }\n\npostDataHandler = () => {\n    const data = {\n        title: this.state.title,\n        body: this.state.content,\n        author: this.state.author\n    };\n\n    axios.post('/posts', data)\n    .then(response => {\n        console.log(response);\n    })\n}\n\n    render () {\n        return (\n            <div className=\"NewPost\">\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />\n                <label>Content</label>\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({content: event.target.value})} />\n                <label>Author</label>\n                <select value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\n                    <option value=\"Max\">Max</option>\n                    <option value=\"Manu\">Manu</option>\n                </select>\n                <button onClick={this.postDataHandler}>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import React, { Component } from 'react';\n//import axios from 'axios'\nimport axios from '../../axios'\n\nimport Post from '../../components/Post/Post';\nimport FullPost from '../../components/FullPost/FullPost';\nimport NewPost from '../../components/NewPost/NewPost';\nimport './Blog.css';\nimport post from '../../components/Post/Post';\n\nclass Blog extends Component {\n    state= {\n        posts: [],\n        selectedPostId: null,\n        error: false\n    }\n\ncomponentDidMount () {\n    axios.get('/posts')\n    .then(response => {\n        const posts=response.data.slice(0,4)\n        const updatePosts =posts.map(post => {\n            return {\n                ...post,\n                author: 'Mike'\n            }\n        })\n        this.setState({posts: updatePosts});\n    }).catch(errr => {\n        this.setState({error: true})\n    })\n}\n\npostSelectedHandler(id) {\nthis.setState({selectedPostId: id})\n}\n\n    render () {\n    let posts = <p style={{textAlign: 'center'}}>Something went wrong</p>;\n\n    if (!this.state.error) {\n        posts = this.state.posts.map((post) => {\n            return <Post \n            title={post.title} \n            author={post.author} \n            key={post.id} \n            clicked={()=>this.postSelectedHandler(post.id)}/>\n        })\n    }\n\n        return (\n            <div>\n                <section className=\"Posts\">\n                    {posts}\n                </section>\n                <section>\n                    <FullPost \n                    id={this.state.selectedPostId} \n                    />\n                </section>\n                <section>\n                    <NewPost />\n                </section>\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, { Component } from 'react';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Blog />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios'\n\naxios.defaults.baseURL= 'https://jsonplaceholder.typicode.com'\n\naxios.interceptors.request.use(request => {\n    console.log(request)\n    return request\n}, error => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n    console.log(response)\n    return response\n}, error => {\n    console.log(error)\n    return Promise.reject(error)\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}